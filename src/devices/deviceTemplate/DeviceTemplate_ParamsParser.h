/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (1.0)
//
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Thu Jan 25 14:38:34 2024


#ifndef DEVICETEMPLATE_PARAMSPARSER_H
#define DEVICETEMPLATE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>

/**
* This class is the parameters parser for class DeviceTemplate.
*
* These are the used parameters:
* | Group name  | Parameter name | Type   | Units | Default Value       | Required | Description                             | Notes                                     |
* |:-----------:|:--------------:|:------:|:-----:|:-------------------:|:--------:|:---------------------------------------:|:-----------------------------------------:|
* | dummy_group | dummy_param1   | string | -     | dummy_default_value | 1        | This is the description of dummy_param1 | Here are additional notes                 |
* | -           | dummy_param2   | double | m/s^2 | 9.81                | 0        | This is the description of dummy_param2 | The default value is the gravity constant |
*
* The device can be launched by yarpdev using one of the following examples:
* \code{.unparsed}
* yarpdev --device DeviceTemplate --dummy_group::dummy_param1 dummy_default_value --dummy_param2 9.81
* \endcode
*
* \code{.unparsed}
* yarpdev --device DeviceTemplate --dummy_group::dummy_param1 dummy_default_value
* \endcode
*
*/

class DeviceTemplate_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    ~DeviceTemplate_ParamsParser() override = default;

public:
    const std::string m_device_type = {"DeviceTemplate"};
    bool m_parser_is_strict = false;
    std::string m_dummy_group_dummy_param1 = {"dummy_default_value"};
    double m_dummy_param2 = {9.81};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceType() const override { return m_device_type; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
};

#endif
