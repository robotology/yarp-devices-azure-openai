/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Fri Jun  6 11:55:38 2025


#include "TtsDevice_ParamsParser.h"
#include <yarp/os/LogStream.h>
#include <yarp/os/Value.h>

namespace {
    YARP_LOG_COMPONENT(TtsDeviceParamsCOMPONENT, "yarp.device.TtsDevice")
}


TtsDevice_ParamsParser::TtsDevice_ParamsParser()
{
}


std::vector<std::string> TtsDevice_ParamsParser::getListOfParams() const
{
    std::vector<std::string> params;
    params.push_back("ENVS::end_point_name");
    params.push_back("ENVS::deployment_id_name");
    params.push_back("ENVS::api_key_name");
    params.push_back("ENVS::api_version_name");
    return params;
}


bool TtsDevice_ParamsParser::getParamValue(const std::string& paramName, std::string& paramValue) const
{
    if (paramName =="ENVS::end_point_name")
    {
        paramValue = m_ENVS_end_point_name;
        return true;
    }
    if (paramName =="ENVS::deployment_id_name")
    {
        paramValue = m_ENVS_deployment_id_name;
        return true;
    }
    if (paramName =="ENVS::api_key_name")
    {
        paramValue = m_ENVS_api_key_name;
        return true;
    }
    if (paramName =="ENVS::api_version_name")
    {
        paramValue = m_ENVS_api_version_name;
        return true;
    }

    yError() <<"parameter '" << paramName << "' was not found";
    return false;

}


std::string TtsDevice_ParamsParser::getConfiguration() const
{
    //This is a sub-optimal solution.
    //Ideally getConfiguration() should return all parameters but it is currently
    //returning only user provided parameters (excluding default values)
    //This behaviour will be fixed in the near future.
    std::string s_cfg = m_provided_configuration;
    return s_cfg;
}

bool      TtsDevice_ParamsParser::parseParams(const yarp::os::Searchable & config)
{
    //Check for --help option
    if (config.check("help"))
    {
        yCInfo(TtsDeviceParamsCOMPONENT) << getDocumentationOfDeviceParams();
    }

    m_provided_configuration = config.toString();
    yarp::os::Property prop_check(m_provided_configuration.c_str());
    //Parser of parameter ENVS::end_point_name
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("ENVS");
        if (sectionp.check("end_point_name"))
        {
            m_ENVS_end_point_name = sectionp.find("end_point_name").asString();
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::end_point_name' using value:" << m_ENVS_end_point_name;
        }
        else
        {
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::end_point_name' using DEFAULT value:" << m_ENVS_end_point_name;
        }
        prop_check.unput("ENVS::end_point_name");
    }

    //Parser of parameter ENVS::deployment_id_name
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("ENVS");
        if (sectionp.check("deployment_id_name"))
        {
            m_ENVS_deployment_id_name = sectionp.find("deployment_id_name").asString();
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::deployment_id_name' using value:" << m_ENVS_deployment_id_name;
        }
        else
        {
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::deployment_id_name' using DEFAULT value:" << m_ENVS_deployment_id_name;
        }
        prop_check.unput("ENVS::deployment_id_name");
    }

    //Parser of parameter ENVS::api_key_name
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("ENVS");
        if (sectionp.check("api_key_name"))
        {
            m_ENVS_api_key_name = sectionp.find("api_key_name").asString();
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::api_key_name' using value:" << m_ENVS_api_key_name;
        }
        else
        {
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::api_key_name' using DEFAULT value:" << m_ENVS_api_key_name;
        }
        prop_check.unput("ENVS::api_key_name");
    }

    //Parser of parameter ENVS::api_version_name
    {
        yarp::os::Bottle sectionp;
        sectionp = config.findGroup("ENVS");
        if (sectionp.check("api_version_name"))
        {
            m_ENVS_api_version_name = sectionp.find("api_version_name").asString();
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::api_version_name' using value:" << m_ENVS_api_version_name;
        }
        else
        {
            yCInfo(TtsDeviceParamsCOMPONENT) << "Parameter 'ENVS::api_version_name' using DEFAULT value:" << m_ENVS_api_version_name;
        }
        prop_check.unput("ENVS::api_version_name");
    }

    /*
    //This code check if the user set some parameter which are not check by the parser
    //If the parser is set in strict mode, this will generate an error
    if (prop_check.size() > 0)
    {
        bool extra_params_found = false;
        for (auto it=prop_check.begin(); it!=prop_check.end(); it++)
        {
            if (m_parser_is_strict)
            {
                yCError(TtsDeviceParamsCOMPONENT) << "User asking for parameter: "<<it->name <<" which is unknown to this parser!";
                extra_params_found = true;
            }
            else
            {
                yCWarning(TtsDeviceParamsCOMPONENT) << "User asking for parameter: "<< it->name <<" which is unknown to this parser!";
            }
        }

       if (m_parser_is_strict && extra_params_found)
       {
           return false;
       }
    }
    */
    return true;
}


std::string      TtsDevice_ParamsParser::getDocumentationOfDeviceParams() const
{
    std::string doc;
    doc = doc + std::string("\n=============================================\n");
    doc = doc + std::string("This is the help for device: TtsDevice\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("This is the list of the parameters accepted by the device:\n");
    doc = doc + std::string("'ENVS::end_point_name': The name of the environmental variable that stores the APIs endpoint\n");
    doc = doc + std::string("'ENVS::deployment_id_name': The name of the environmental variable that stores the deployment ID\n");
    doc = doc + std::string("'ENVS::api_key_name': The name of the environmental variable that stores the APIs access key\n");
    doc = doc + std::string("'ENVS::api_version_name': The name of the environmental variable that stores the APIs version used\n");
    doc = doc + std::string("\n");
    doc = doc + std::string("Here are some examples of invocation command with yarpdev, with all params:\n");
    doc = doc + " yarpdev --device ttsDevice --ENVS::end_point_name AZURE_ENDPOINT --ENVS::deployment_id_name DEPLOYMENT_TTS_ID --ENVS::api_key_name AZURE_API_KEY --ENVS::api_version_name AZURE_API_VERSION_TTS\n";
    doc = doc + std::string("Using only mandatory params:\n");
    doc = doc + " yarpdev --device ttsDevice\n";
    doc = doc + std::string("=============================================\n\n");    return doc;
}
