/*
 * SPDX-FileCopyrightText: 2023-2023 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: LGPL-2.1-or-later
 */


// Generated by yarpDeviceParamParserGenerator (2.0)
// This is an automatically generated file. Please do not edit it.
// It will be re-generated if the cmake flag ALLOW_DEVICE_PARAM_PARSER_GERNERATION is ON.

// Generated on: Wed Aug 27 17:37:40 2025


#ifndef TTSDEVICE_PARAMSPARSER_H
#define TTSDEVICE_PARAMSPARSER_H

#include <yarp/os/Searchable.h>
#include <yarp/dev/IDeviceDriverParams.h>
#include <string>
#include <cmath>

/**
* This class is the parameters parser for class TtsDevice.
*
* These are the used parameters:
* | Group name | Parameter name     | Type   | Units | Default Value         | Required | Description                                                              | Notes                                     |
* |:----------:|:------------------:|:------:|:-----:|:---------------------:|:--------:|:------------------------------------------------------------------------:|:-----------------------------------------:|
* | ENVS       | end_point_name     | string | -     | AZURE_ENDPOINT        | 0        | The name of the environmental variable that stores the APIs endpoint     | Here are additional notes                 |
* | ENVS       | deployment_id_name | string | -     | DEPLOYMENT_TTS_ID     | 0        | The name of the environmental variable that stores the deployment ID     | Here are additional notes                 |
* | ENVS       | api_key_name       | string | -     | AZURE_API_KEY         | 0        | The name of the environmental variable that stores the APIs access key   | The default value is the gravity constant |
* | ENVS       | api_version_name   | string | -     | AZURE_API_VERSION_TTS | 0        | The name of the environmental variable that stores the APIs version used | The default value is the gravity constant |
*
* The device can be launched by yarpdev using one of the following examples (with and without all optional parameters):
* \code{.unparsed}
* yarpdev --device ttsDevice --ENVS::end_point_name AZURE_ENDPOINT --ENVS::deployment_id_name DEPLOYMENT_TTS_ID --ENVS::api_key_name AZURE_API_KEY --ENVS::api_version_name AZURE_API_VERSION_TTS
* \endcode
*
* \code{.unparsed}
* yarpdev --device ttsDevice
* \endcode
*
*/

class TtsDevice_ParamsParser : public yarp::dev::IDeviceDriverParams
{
public:
    TtsDevice_ParamsParser();
    ~TtsDevice_ParamsParser() override = default;

public:
    const std::string m_device_classname = {"TtsDevice"};
    const std::string m_device_name = {"ttsDevice"};
    bool m_parser_is_strict = false;
    struct parser_version_type
    {
         int major = 2;
         int minor = 0;
    };
    const parser_version_type m_parser_version = {};

    std::string m_provided_configuration;

    const std::string m_ENVS_end_point_name_defaultValue = {"AZURE_ENDPOINT"};
    const std::string m_ENVS_deployment_id_name_defaultValue = {"DEPLOYMENT_TTS_ID"};
    const std::string m_ENVS_api_key_name_defaultValue = {"AZURE_API_KEY"};
    const std::string m_ENVS_api_version_name_defaultValue = {"AZURE_API_VERSION_TTS"};

    std::string m_ENVS_end_point_name = {"AZURE_ENDPOINT"};
    std::string m_ENVS_deployment_id_name = {"DEPLOYMENT_TTS_ID"};
    std::string m_ENVS_api_key_name = {"AZURE_API_KEY"};
    std::string m_ENVS_api_version_name = {"AZURE_API_VERSION_TTS"};

    bool          parseParams(const yarp::os::Searchable & config) override;
    std::string   getDeviceClassName() const override { return m_device_classname; }
    std::string   getDeviceName() const override { return m_device_name; }
    std::string   getDocumentationOfDeviceParams() const override;
    std::vector<std::string> getListOfParams() const override;
    bool getParamValue(const std::string& paramName, std::string& paramValue) const override;
    std::string   getConfiguration() const override;
};

#endif
